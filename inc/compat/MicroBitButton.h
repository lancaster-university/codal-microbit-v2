/*
The MIT License (MIT)

Copyright (c) 2020 Lancaster University.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef MICROBIT_BUTTON_H
#define MICROBIT_BUTTON_H

#include "Button.h"
#include "MicroBitCompat.h"

namespace codal
{

typedef ButtonEventConfiguration MicroBitButtonEventConfiguration;


/**
  * Class definition for MicroBit Button.
  *
  * Represents a single, generic button on the device.
  */
class MicroBitButton : public NRF52Pin, public Button
{
    public:

    /**
      * Constructor.
      *
      * Create a software representation of a button.
      *
      * @param name the physical pin on the processor that should be used as input.
      *
      * @param id the ID of the new MicroBitButton object.
      *
      * @param eventConfiguration Configures the events that will be generated by this MicroBitButton instance.
      *                           Defaults to MICROBIT_BUTTON_ALL_EVENTS.
      *
      * @param mode the configuration of internal pullups/pulldowns, as defined in the mbed PinMode class. PullNone by default.
      */
    MicroBitButton(PinName name, uint16_t id, MicroBitButtonEventConfiguration eventConfiguration = MICROBIT_BUTTON_ALL_EVENTS, PinMode mode = PullNone);

    /**
      * Constructor.
      *
      * Create a software representation of a button.
      *
      * @param p_number the physical pin on the processor that should be used as input.
      *
      * @param id the ID of the new MicroBitButton object.
      *
      * @param eventConfiguration Configures the events that will be generated by this MicroBitButton instance.
      *                           Defaults to MICROBIT_BUTTON_ALL_EVENTS.
      *
      * @param mode the configuration of internal pullups/pulldowns, as defined in the mbed PinMode class. PullNone by default.
      */
    MicroBitButton(PinNumber p_number, uint16_t id, MicroBitButtonEventConfiguration eventConfiguration = MICROBIT_BUTTON_ALL_EVENTS, PinMode mode = PullNone);

    /**
     * Constructor.
     *
     * Create a software representation of a button.
     *
     * @param pin the physical pin on the device connected to this button.
     *
     * @param id the ID of the new Button object.
     *
     * @param eventConfiguration Configures the events that will be generated by this Button instance.
     *                           Defaults to DEVICE_BUTTON_ALL_EVENTS.
     *
     * @param mode the configuration of internal pullups/pulldowns, as defined in the mbed PullMode class. PullNone by default.
     *
     */
    MicroBitButton(Pin &p, uint16_t id, ButtonEventConfiguration eventConfiguration = DEVICE_BUTTON_ALL_EVENTS, ButtonPolarity polarity = ACTIVE_LOW, PullMode mode = PullMode::None);

};

}
#endif
